<?php

/**
 * @file
 * Drippic is a Twitter photo app built on Drupal.
 *
 * This is the main module for the app containing all the main hooks and functions.
 */

/**
 * Implementation if hook_init()
 *
 */
function drippic_init(){
  // Adding Twitter hovercards using Twitter Anywhere.
	drupal_set_html_head('<script src="http://platform.twitter.com/anywhere.js?id=N8c1DnM9nnJr22ZIEq6g&v=1" type="text/javascript"></script>');
	$js = "twttr.anywhere(function(twitter) {";
	$js .=	"twitter.hovercards();";
	$js .=	"twitter.linkifyUsers();";
	$js .= "twitter('#followbutton').followButton('@drippic');";
	$js .= "});";
  drupal_add_js($js, 'inline');
  
  // Adding Drippic's javascript file.
  drupal_add_js(drupal_get_path('module', 'drippic') .'/drippic.js');
}

/*
 * Implementiation of hook_menu()
 *
 */
function drippic_menu(){	
  $items = array();
  
  $items['drippic2/upload'] = array(
    'title' => 'Upload',
    'page callback' => 'drippic_two_upload',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'drippic.api.inc',
  );
  
  $items['drippic/show/%/%'] = array(
    'title' => 'Show',
    'page callback' => 'drippic_show',
    'page arguments' => array(2, 3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'drippic.api.inc',
  );
  
  $items['photos/%/%'] = array(
    'title' => 'user photos',
    'page callback' => 'drippic_user_photos',
    'page arguments' => array(1, 2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'drippic.api.inc',
  );
   
  return $items;
}

/**
 * Custom Drippic function to create nodes.
 *
 * @param $tweet
 *   The text to use as the node title..
 *
 * @param $media
 *   The file array from $_FILES
 *
 * @param $account
 *   A drupal user object.
 *
 * @return
 *   The node id of the newly created node.
 *
 */
function drippic_create_node($tweet, $media, $account = null) {
  // make sure that the user object is pulled in
  if(!isset($account)){
	  global $user;
	  $account = $user;
  }
  // Had an odd bug with images being posted as anonymous, here's a quick / hacky fix.
  if($account->status == 0){
    return FALSE;
  }
  watchdog('drippic','account: </pre>'.print_r($account,true).'</pre>');
  // create the node
  $node = new stdClass;
  $node->status = 1;
  $node->type = 'pic';
  $node->title = $tweet;
  
  // save the image
	$target_path = file_directory_path();
	$target_path = $target_path . '/' . basename($media['name']); 
	if(move_uploaded_file($media['tmp_name'], $target_path)) {
	    watchdog('drippic', "The file uploaded ok");
	} else{
	    watchdog('drippic',"There was an error uploading the file, please try again!");
	}
	
	// Add the image to an imagefield
  $file = drippic_imagefield_load('field_pic', 'pic', $target_path, $account);
  $node->field_pic[0] = $file;

  // Save node
  module_load_include('inc', 'node', 'node.pages');
  node_object_prepare($node);
  $node->form_id = $node->type . '_node_form';

  // pretend we're saving the node from a node form
  $node = node_submit($node);
  $node->uid = $account->uid;
  $node->api_node = TRUE;
  // demote the node from the front page if the user has protected tweets 
  if(isset($account->twitter)){
    if($account->twitter->protected == 1){
      $node->promote = 0;
    }
  }
  node_save($node);
  watchdog('drippic','<pre>'.print_r($node,true).'</pre>');
	return $node->nid;
}

/**
 * Custom Drippic to save the images as image_field entries.
 *
 * @param $field_name
 *
 * @param $ctype_name
 *
 * @param $full_file_path
 *
 * @param $account
 *   A drupal user object.
 *
 * @return
 *   An array containing the file information.
 *
 */
function drippic_imagefield_load($field_name, $ctype_name, $full_file_path, $account) {
    $field = content_fields($field_name, $ctype_name);
    $validators = filefield_widget_upload_validators($field);

    // make sure that the directory exists
    $directory = filefield_widget_file_path($field);
    field_file_check_directory($directory, FILE_CREATE_DIRECTORY);

    // move the file
    if ($file = field_file_save_file($full_file_path, $validators, $directory, $account)) {
      return $file;
    }
    else {
      return FALSE;
    }
}

/*
 * Implementation of hook_form_alter()
 */
function drippic_form_alter(&$form, &$form_state, $form_id){
  // Adding custom submit handler to comment forms
	if($form_id == 'comment_form'){
	  $form['#submit'][] = 'drippic_comment_form_submit';
	}
	
	// Removes twitter.module submit handler and adds drippic submit handler.
  if (_twitter_use_oauth() && $form_id == 'twitter_oauth_callback' && $_SESSION['twitter_oauth']['signin']) {
    if($form['#submit'][0] == 'twitter_signin_oauth_callback_submit'){
      unset($form['#submit'][0]);
    }
    $form['#submit'] = array_merge(array('drippic_signin_oauth_callback_submit'), $form['#submit']);
  }
}

/*
 * Override of twitter_signin_oauth_callback_submit but allows existing users to login
 * with oAuth from a twitter account with a matching username.
 */
function drippic_signin_oauth_callback_submit(&$form, &$form_state) {
  global $user;

  $success = FALSE;

  $key = variable_get('twitter_consumer_key', '');
  $secret = variable_get('twitter_consumer_secret', '');
  $response = $form_state['twitter_oauth']['response'];

  $account = user_external_load($response['user_id']);
  if (isset($account->uid)) {
    user_external_login($account, $response);
    $success = TRUE;
  }
  elseif ($uid = db_result(db_query("SELECT uid FROM {twitter_account} WHERE twitter_uid= %d", $response['user_id']))) {
    // We have an existing twitter account - set it up for login
    $account = user_load($uid);
    $edit["authname_twitter"] = $response['user_id'];
    user_save($account, $edit);
    $user = $account;
    $success = TRUE;
  }
  else {
    // No existing user account, let's see if we can register.
    if (variable_get('twitter_signin_register', 0)) {
      // Check for a nickname collision
      $account = user_load(array('name' => $response['screen_name']));
      if (!$account->uid) {
        $edit = array(
          'name' => $response['screen_name'],
          'pass' => user_password(),
          'init' => $response['screen_name'],
          'status' => 1,
          "authname_twitter" => $response['user_id'],
          'access' => time(),
        );
        $account = user_save('', $edit);
        $user = $account;
        $success = TRUE;
        watchdog('drippic','Account created for' . $response['screen_name']);
      }
      else {
        $edit = array(
          'name' => $response['screen_name'],
          'pass' => user_password(),
          'init' => $response['screen_name'],
          'status' => 1,
          "authname_twitter" => $response['user_id'],
          'access' => time(),
        );
        $account = user_save($account, $edit);
        $user = $account;
        $success = TRUE;
        watchdog('drippic','Twitter oAuth added for ' . $response['screen_name']);
      }
    }
    else {
      drupal_set_message(t('Please complete the following registration form to create your new account on %site', array('%site' => variable_get('site_name', ''))));
    }
  }
  
  if (!$success) {
    $_SESSION['twitter']['values'] = $response;
    drupal_goto('user/register');
  }
}

/*
 * Submit handler for the comment form.
 *
 * Tweets the comments as an @ reply to the person to posted the photo.
 */
function drippic_comment_form_submit($form, &$form_state) {
  global $user;
	$tweet = $form_state['values']['comment'];
	$node = node_load($form_state['values']['nid']);
	$url = 'http://'.$_SERVER['SERVER_NAME'].'/'.$node->field_url[0]['value'];
	$post = '@' . $node->name . ' ' . $tweet . ' ' . $url;
	while(strlen($post) > 140){
		$tweet = substr($tweet, 0, -4);
		$post = '@' . $node->name . $tweet . '... ' . $url;
	}
	
	module_load_include('inc', 'twitter');
	$values = db_fetch_array(db_query("SELECT twitter_uid FROM {twitter_account} WHERE uid = %d", $user->uid)); 
  $twitter_account = twitter_account_load($values[twitter_uid]);
   try {
   	$result = twitter_set_status($twitter_account, $post);
   	watchdog('drippic',t('Successfully posted to Twitter'));
   	}
   	catch (TwitterException $e) {
   	watchdog('drippic',t('An error occurred when posting to twitter: %code %error',
   	array('%code' => $result->code, '%error' => $result->error)), 'warning');
   	}
}

/* 
 * Implementation of hook_nodeapi()
 */
function drippic_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  // Tweet (via oauth) when node is inserted via node/add form.
  global $user;
  if($op == 'insert' && !isset($node->api_node) && ($node->type == 'pic')){

		$tweet = $node->title;
		$url = 'http://'.$_SERVER['SERVER_NAME'].'/'.$node->field_url[0]['value'];
		$post = $tweet . ' ' . $url;
		while(strlen($post) > 140){
			$tweet = substr($tweet, 0, -4);
			$post = $tweet . '... ' . $url;
		}
	  
	  global $user;
	  module_load_include('inc', 'twitter');
  	$values = db_fetch_array(db_query("SELECT twitter_uid FROM {twitter_account} WHERE uid = %d", $user->uid)); 
    $twitter_account = twitter_account_load($values[twitter_uid]);
     try {
     	$result = twitter_set_status($twitter_account, $post);
     	watchdog('drippic',t('Successfully posted to Twitter'));
     	}
     	catch (TwitterException $e) {
     	watchdog('drippic',t('An error occurred when posting to twitter: %code %error',
     	array('%code' => $result->code, '%error' => $result->error)), 'warning');
     	}
  }
  
  // Add Twitter hashtags as taxonomy terms
  if($op == 'insert' && $node->type == 'pic'){
    unset($node->taxonomy);
    preg_match_all('/(^|\s)#(\w+)/', $node->title, $matches);
    $node->taxonomy['tags'][1] = implode(',',$matches[2]);
    taxonomy_node_save($node, $node->taxonomy);
  }
}